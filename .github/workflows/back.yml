name: Build and Push to GCR

on:
  push:
    branches:
      - main

env:
  GITHUB_SHA: ${{ github.sha }} 
  GITHUB_REF: ${{ github.ref }} 
  IMAGE: back
  DEPLOYMENT_NAME: back
  #REGISTRY_HOSTNAME: gcr.io
  REGISTRY_HOSTNAME: gcr.io/total-zodiac-335107
  PROJECT_ID: total-zodiac-335107
  GKE_CLUSTER: cluster-1
  GKE_ZONE: europe-north1-a

jobs:
  Explore-GitHub-Actions:
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: Check out repository code
        uses: actions/checkout@v2
      - run: echo "üí° The ${{ github.repository }} repository has been cloned to the runner."
      - run: echo "üñ•Ô∏è The workflow is now ready to test your code on the runner."


      - id: 'auth'
        uses: 'google-github-actions/auth@v0'
        with:
          workload_identity_provider: 'projects/391838834835/locations/global/workloadIdentityPools/my-pool/providers/my-provider'
          service_account: 'my-service-account@total-zodiac-335107.iam.gserviceaccount.com'

    # Configure docker to use the gcloud command-line tool as a credential helper zzz!
      - run: |
          # Set up docker to authenticate
          # via gcloud command-line tool.
          gcloud auth configure-docker

    # Build the Docker image
      - name: Build
        working-directory: back
        run: |
          export TAG=`echo $GITHUB_REF | awk -F/ '{print $NF}'`
          echo $TAG
          docker build -t "$REGISTRY_HOSTNAME"/"$IMAGE":"$TAG" \
          --build-arg GITHUB_SHA="$GITHUB_SHA" \
          --build-arg GITHUB_REF="$GITHUB_REF" .

      - name: Publish
        run: |
          export TAG=`echo $GITHUB_REF | awk -F/ '{print $NF}'`
          echo $TAG
          docker push "$REGISTRY_HOSTNAME"/"$IMAGE":"$TAG"
          docker tag "$REGISTRY_HOSTNAME"/"$IMAGE":"$TAG" "$REGISTRY_HOSTNAME"/"$IMAGE":latest
          docker push "$REGISTRY_HOSTNAME"/"$IMAGE":latest


      - id: 'get-credentials'
        uses: 'google-github-actions/get-gke-credentials@v0'
        with:
          cluster_name: 'cluster-1'
          location: 'europe-north1-a'

      # The KUBECONFIG env var is automatically exported and picked up by kubectl.
      #- id: 'get-pods'
       # run: 'kubectl get pods'
